// Code generated by mockery v1.0.0. DO NOT EDIT.

package olm

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockOperatorServiceManager is an autogenerated mock type for the OperatorServiceManager type
type MockOperatorServiceManager struct {
	mock.Mock
}

// InstallOLMOperator provides a mock function with given fields: ctx
func (_m *MockOperatorServiceManager) InstallOLMOperator(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InstallOperator provides a mock function with given fields: ctx, req
func (_m *MockOperatorServiceManager) InstallOperator(ctx context.Context, req InstallOperatorRequest) error {
	ret := _m.Called(ctx, req)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, InstallOperatorRequest) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetKubeConfig provides a mock function with given fields: kubeConfig
func (_m *MockOperatorServiceManager) SetKubeConfig(kubeConfig string) error {
	ret := _m.Called(kubeConfig)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(kubeConfig)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpgradeOperator provides a mock function with given fields: ctx, namespace, name
func (_m *MockOperatorServiceManager) UpgradeOperator(ctx context.Context, namespace string, name string) error {
	ret := _m.Called(ctx, namespace, name)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, namespace, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

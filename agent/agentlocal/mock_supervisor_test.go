// Code generated by mockery v1.0.0. DO NOT EDIT.

package agentlocal

import (
	agentlocalpb "github.com/percona/pmm/api/agentlocalpb"
	mock "github.com/stretchr/testify/mock"
)

// mockSupervisor is an autogenerated mock type for the supervisor type
type mockSupervisor struct {
	mock.Mock
}

// AgentLogsByID provides a mock function with given fields: ID
func (_m *mockSupervisor) AgentLogsByID(ID string) ([]string, error) {
	ret := _m.Called(ID)

	var r0 []string
	if rf, ok := ret.Get(0).(func(string) []string); ok {
		r0 = rf(ID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AgentsList provides a mock function with given fields:
func (_m *mockSupervisor) AgentsList() []*agentlocalpb.AgentInfo {
	ret := _m.Called()

	var r0 []*agentlocalpb.AgentInfo
	if rf, ok := ret.Get(0).(func() []*agentlocalpb.AgentInfo); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*agentlocalpb.AgentInfo)
		}
	}

	return r0
}

// AgentsLogs provides a mock function with given fields:
func (_m *mockSupervisor) AgentsLogs() map[string][]string {
	ret := _m.Called()

	var r0 map[string][]string
	if rf, ok := ret.Get(0).(func() map[string][]string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string][]string)
		}
	}

	return r0
}

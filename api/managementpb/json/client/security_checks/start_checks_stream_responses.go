// Code generated by go-swagger; DO NOT EDIT.

package security_checks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// StartChecksStreamReader is a Reader for the StartChecksStream structure.
type StartChecksStreamReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *StartChecksStreamReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewStartChecksStreamOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewStartChecksStreamDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewStartChecksStreamOK creates a StartChecksStreamOK with default headers values
func NewStartChecksStreamOK() *StartChecksStreamOK {
	return &StartChecksStreamOK{}
}

/* StartChecksStreamOK describes a response with status code 200, with default header values.

A successful response.(streaming responses)
*/
type StartChecksStreamOK struct {
	Payload *StartChecksStreamOKBody
}

func (o *StartChecksStreamOK) Error() string {
	return fmt.Sprintf("[POST /v1/management/SecurityChecks/Stream][%d] startChecksStreamOk  %+v", 200, o.Payload)
}

func (o *StartChecksStreamOK) GetPayload() *StartChecksStreamOKBody {
	return o.Payload
}

func (o *StartChecksStreamOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {
	o.Payload = new(StartChecksStreamOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStartChecksStreamDefault creates a StartChecksStreamDefault with default headers values
func NewStartChecksStreamDefault(code int) *StartChecksStreamDefault {
	return &StartChecksStreamDefault{
		_statusCode: code,
	}
}

/* StartChecksStreamDefault describes a response with status code -1, with default header values.

An unexpected error response.
*/
type StartChecksStreamDefault struct {
	_statusCode int

	Payload *StartChecksStreamDefaultBody
}

// Code gets the status code for the start checks stream default response
func (o *StartChecksStreamDefault) Code() int {
	return o._statusCode
}

func (o *StartChecksStreamDefault) Error() string {
	return fmt.Sprintf("[POST /v1/management/SecurityChecks/Stream][%d] StartChecksStream default  %+v", o._statusCode, o.Payload)
}

func (o *StartChecksStreamDefault) GetPayload() *StartChecksStreamDefaultBody {
	return o.Payload
}

func (o *StartChecksStreamDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {
	o.Payload = new(StartChecksStreamDefaultBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*StartChecksStreamDefaultBody start checks stream default body
swagger:model StartChecksStreamDefaultBody
*/
type StartChecksStreamDefaultBody struct {
	// code
	Code int32 `json:"code,omitempty"`

	// message
	Message string `json:"message,omitempty"`

	// details
	Details []*StartChecksStreamDefaultBodyDetailsItems0 `json:"details"`
}

// Validate validates this start checks stream default body
func (o *StartChecksStreamDefaultBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *StartChecksStreamDefaultBody) validateDetails(formats strfmt.Registry) error {
	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("StartChecksStream default" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("StartChecksStream default" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this start checks stream default body based on the context it is used
func (o *StartChecksStreamDefaultBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *StartChecksStreamDefaultBody) contextValidateDetails(ctx context.Context, formats strfmt.Registry) error {
	for i := 0; i < len(o.Details); i++ {
		if o.Details[i] != nil {
			if err := o.Details[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("StartChecksStream default" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("StartChecksStream default" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *StartChecksStreamDefaultBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *StartChecksStreamDefaultBody) UnmarshalBinary(b []byte) error {
	var res StartChecksStreamDefaultBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*StartChecksStreamDefaultBodyDetailsItems0 start checks stream default body details items0
swagger:model StartChecksStreamDefaultBodyDetailsItems0
*/
type StartChecksStreamDefaultBodyDetailsItems0 struct {
	// at type
	AtType string `json:"@type,omitempty"`
}

// Validate validates this start checks stream default body details items0
func (o *StartChecksStreamDefaultBodyDetailsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this start checks stream default body details items0 based on context it is used
func (o *StartChecksStreamDefaultBodyDetailsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *StartChecksStreamDefaultBodyDetailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *StartChecksStreamDefaultBodyDetailsItems0) UnmarshalBinary(b []byte) error {
	var res StartChecksStreamDefaultBodyDetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*StartChecksStreamOKBody Stream result of managementCheckResult
swagger:model StartChecksStreamOKBody
*/
type StartChecksStreamOKBody struct {
	// error
	Error *StartChecksStreamOKBodyError `json:"error,omitempty"`

	// result
	Result *StartChecksStreamOKBodyResult `json:"result,omitempty"`
}

// Validate validates this start checks stream OK body
func (o *StartChecksStreamOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateError(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateResult(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *StartChecksStreamOKBody) validateError(formats strfmt.Registry) error {
	if swag.IsZero(o.Error) { // not required
		return nil
	}

	if o.Error != nil {
		if err := o.Error.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("startChecksStreamOk" + "." + "error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("startChecksStreamOk" + "." + "error")
			}
			return err
		}
	}

	return nil
}

func (o *StartChecksStreamOKBody) validateResult(formats strfmt.Registry) error {
	if swag.IsZero(o.Result) { // not required
		return nil
	}

	if o.Result != nil {
		if err := o.Result.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("startChecksStreamOk" + "." + "result")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("startChecksStreamOk" + "." + "result")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this start checks stream OK body based on the context it is used
func (o *StartChecksStreamOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateError(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateResult(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *StartChecksStreamOKBody) contextValidateError(ctx context.Context, formats strfmt.Registry) error {
	if o.Error != nil {
		if err := o.Error.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("startChecksStreamOk" + "." + "error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("startChecksStreamOk" + "." + "error")
			}
			return err
		}
	}

	return nil
}

func (o *StartChecksStreamOKBody) contextValidateResult(ctx context.Context, formats strfmt.Registry) error {
	if o.Result != nil {
		if err := o.Result.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("startChecksStreamOk" + "." + "result")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("startChecksStreamOk" + "." + "result")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *StartChecksStreamOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *StartChecksStreamOKBody) UnmarshalBinary(b []byte) error {
	var res StartChecksStreamOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*StartChecksStreamOKBodyError start checks stream OK body error
swagger:model StartChecksStreamOKBodyError
*/
type StartChecksStreamOKBodyError struct {
	// code
	Code int32 `json:"code,omitempty"`

	// message
	Message string `json:"message,omitempty"`

	// details
	Details []*StartChecksStreamOKBodyErrorDetailsItems0 `json:"details"`
}

// Validate validates this start checks stream OK body error
func (o *StartChecksStreamOKBodyError) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *StartChecksStreamOKBodyError) validateDetails(formats strfmt.Registry) error {
	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("startChecksStreamOk" + "." + "error" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("startChecksStreamOk" + "." + "error" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this start checks stream OK body error based on the context it is used
func (o *StartChecksStreamOKBodyError) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *StartChecksStreamOKBodyError) contextValidateDetails(ctx context.Context, formats strfmt.Registry) error {
	for i := 0; i < len(o.Details); i++ {
		if o.Details[i] != nil {
			if err := o.Details[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("startChecksStreamOk" + "." + "error" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("startChecksStreamOk" + "." + "error" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *StartChecksStreamOKBodyError) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *StartChecksStreamOKBodyError) UnmarshalBinary(b []byte) error {
	var res StartChecksStreamOKBodyError
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*StartChecksStreamOKBodyErrorDetailsItems0 start checks stream OK body error details items0
swagger:model StartChecksStreamOKBodyErrorDetailsItems0
*/
type StartChecksStreamOKBodyErrorDetailsItems0 struct {
	// at type
	AtType string `json:"@type,omitempty"`
}

// Validate validates this start checks stream OK body error details items0
func (o *StartChecksStreamOKBodyErrorDetailsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this start checks stream OK body error details items0 based on context it is used
func (o *StartChecksStreamOKBodyErrorDetailsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *StartChecksStreamOKBodyErrorDetailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *StartChecksStreamOKBodyErrorDetailsItems0) UnmarshalBinary(b []byte) error {
	var res StartChecksStreamOKBodyErrorDetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*StartChecksStreamOKBodyResult CheckResult represents the check results for a given service.
swagger:model StartChecksStreamOKBodyResult
*/
type StartChecksStreamOKBodyResult struct {
	// summary
	Summary string `json:"summary,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// Severity represents severity level of the check result or alert.
	// Enum: [SEVERITY_INVALID SEVERITY_EMERGENCY SEVERITY_ALERT SEVERITY_CRITICAL SEVERITY_ERROR SEVERITY_WARNING SEVERITY_NOTICE SEVERITY_INFO SEVERITY_DEBUG]
	Severity *string `json:"severity,omitempty"`

	// labels
	Labels map[string]string `json:"labels,omitempty"`

	// URL containing information on how to resolve an issue detected by an STT check.
	ReadMoreURL string `json:"read_more_url,omitempty"`

	// Name of the monitored service on which the check ran.
	ServiceName string `json:"service_name,omitempty"`

	// ID of the monitored service on which the check ran.
	ServiceID string `json:"service_id,omitempty"`

	// Name of the check that failed
	CheckName string `json:"check_name,omitempty"`

	// ID of the check result as stored in AlertManager
	AlertID string `json:"alert_id,omitempty"`

	// Silence status of the check result
	Silenced bool `json:"silenced,omitempty"`
}

// Validate validates this start checks stream OK body result
func (o *StartChecksStreamOKBodyResult) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateSeverity(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var startChecksStreamOkBodyResultTypeSeverityPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["SEVERITY_INVALID","SEVERITY_EMERGENCY","SEVERITY_ALERT","SEVERITY_CRITICAL","SEVERITY_ERROR","SEVERITY_WARNING","SEVERITY_NOTICE","SEVERITY_INFO","SEVERITY_DEBUG"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		startChecksStreamOkBodyResultTypeSeverityPropEnum = append(startChecksStreamOkBodyResultTypeSeverityPropEnum, v)
	}
}

const (

	// StartChecksStreamOKBodyResultSeveritySEVERITYINVALID captures enum value "SEVERITY_INVALID"
	StartChecksStreamOKBodyResultSeveritySEVERITYINVALID string = "SEVERITY_INVALID"

	// StartChecksStreamOKBodyResultSeveritySEVERITYEMERGENCY captures enum value "SEVERITY_EMERGENCY"
	StartChecksStreamOKBodyResultSeveritySEVERITYEMERGENCY string = "SEVERITY_EMERGENCY"

	// StartChecksStreamOKBodyResultSeveritySEVERITYALERT captures enum value "SEVERITY_ALERT"
	StartChecksStreamOKBodyResultSeveritySEVERITYALERT string = "SEVERITY_ALERT"

	// StartChecksStreamOKBodyResultSeveritySEVERITYCRITICAL captures enum value "SEVERITY_CRITICAL"
	StartChecksStreamOKBodyResultSeveritySEVERITYCRITICAL string = "SEVERITY_CRITICAL"

	// StartChecksStreamOKBodyResultSeveritySEVERITYERROR captures enum value "SEVERITY_ERROR"
	StartChecksStreamOKBodyResultSeveritySEVERITYERROR string = "SEVERITY_ERROR"

	// StartChecksStreamOKBodyResultSeveritySEVERITYWARNING captures enum value "SEVERITY_WARNING"
	StartChecksStreamOKBodyResultSeveritySEVERITYWARNING string = "SEVERITY_WARNING"

	// StartChecksStreamOKBodyResultSeveritySEVERITYNOTICE captures enum value "SEVERITY_NOTICE"
	StartChecksStreamOKBodyResultSeveritySEVERITYNOTICE string = "SEVERITY_NOTICE"

	// StartChecksStreamOKBodyResultSeveritySEVERITYINFO captures enum value "SEVERITY_INFO"
	StartChecksStreamOKBodyResultSeveritySEVERITYINFO string = "SEVERITY_INFO"

	// StartChecksStreamOKBodyResultSeveritySEVERITYDEBUG captures enum value "SEVERITY_DEBUG"
	StartChecksStreamOKBodyResultSeveritySEVERITYDEBUG string = "SEVERITY_DEBUG"
)

// prop value enum
func (o *StartChecksStreamOKBodyResult) validateSeverityEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, startChecksStreamOkBodyResultTypeSeverityPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *StartChecksStreamOKBodyResult) validateSeverity(formats strfmt.Registry) error {
	if swag.IsZero(o.Severity) { // not required
		return nil
	}

	// value enum
	if err := o.validateSeverityEnum("startChecksStreamOk"+"."+"result"+"."+"severity", "body", *o.Severity); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this start checks stream OK body result based on context it is used
func (o *StartChecksStreamOKBodyResult) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *StartChecksStreamOKBodyResult) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *StartChecksStreamOKBodyResult) UnmarshalBinary(b []byte) error {
	var res StartChecksStreamOKBodyResult
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

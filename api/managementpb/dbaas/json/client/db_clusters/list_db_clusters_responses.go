// Code generated by go-swagger; DO NOT EDIT.

package db_clusters

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ListDBClustersReader is a Reader for the ListDBClusters structure.
type ListDBClustersReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListDBClustersReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewListDBClustersOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewListDBClustersDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewListDBClustersOK creates a ListDBClustersOK with default headers values
func NewListDBClustersOK() *ListDBClustersOK {
	return &ListDBClustersOK{}
}

/*
ListDBClustersOK describes a response with status code 200, with default header values.

A successful response.
*/
type ListDBClustersOK struct {
	Payload *ListDBClustersOKBody
}

func (o *ListDBClustersOK) Error() string {
	return fmt.Sprintf("[POST /v1/management/DBaaS/DBClusters/List][%d] listDbClustersOk  %+v", 200, o.Payload)
}

func (o *ListDBClustersOK) GetPayload() *ListDBClustersOKBody {
	return o.Payload
}

func (o *ListDBClustersOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {
	o.Payload = new(ListDBClustersOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListDBClustersDefault creates a ListDBClustersDefault with default headers values
func NewListDBClustersDefault(code int) *ListDBClustersDefault {
	return &ListDBClustersDefault{
		_statusCode: code,
	}
}

/*
ListDBClustersDefault describes a response with status code -1, with default header values.

An unexpected error response.
*/
type ListDBClustersDefault struct {
	_statusCode int

	Payload *ListDBClustersDefaultBody
}

// Code gets the status code for the list DB clusters default response
func (o *ListDBClustersDefault) Code() int {
	return o._statusCode
}

func (o *ListDBClustersDefault) Error() string {
	return fmt.Sprintf("[POST /v1/management/DBaaS/DBClusters/List][%d] ListDBClusters default  %+v", o._statusCode, o.Payload)
}

func (o *ListDBClustersDefault) GetPayload() *ListDBClustersDefaultBody {
	return o.Payload
}

func (o *ListDBClustersDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {
	o.Payload = new(ListDBClustersDefaultBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
ListDBClustersBody list DB clusters body
swagger:model ListDBClustersBody
*/
type ListDBClustersBody struct {
	// Kubernetes cluster name.
	KubernetesClusterName string `json:"kubernetes_cluster_name,omitempty"`
}

// Validate validates this list DB clusters body
func (o *ListDBClustersBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this list DB clusters body based on context it is used
func (o *ListDBClustersBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ListDBClustersBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListDBClustersBody) UnmarshalBinary(b []byte) error {
	var res ListDBClustersBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ListDBClustersDefaultBody list DB clusters default body
swagger:model ListDBClustersDefaultBody
*/
type ListDBClustersDefaultBody struct {
	// code
	Code int32 `json:"code,omitempty"`

	// message
	Message string `json:"message,omitempty"`

	// details
	Details []*ListDBClustersDefaultBodyDetailsItems0 `json:"details"`
}

// Validate validates this list DB clusters default body
func (o *ListDBClustersDefaultBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ListDBClustersDefaultBody) validateDetails(formats strfmt.Registry) error {
	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ListDBClusters default" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("ListDBClusters default" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this list DB clusters default body based on the context it is used
func (o *ListDBClustersDefaultBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ListDBClustersDefaultBody) contextValidateDetails(ctx context.Context, formats strfmt.Registry) error {
	for i := 0; i < len(o.Details); i++ {
		if o.Details[i] != nil {
			if err := o.Details[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ListDBClusters default" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("ListDBClusters default" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ListDBClustersDefaultBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListDBClustersDefaultBody) UnmarshalBinary(b []byte) error {
	var res ListDBClustersDefaultBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ListDBClustersDefaultBodyDetailsItems0 list DB clusters default body details items0
swagger:model ListDBClustersDefaultBodyDetailsItems0
*/
type ListDBClustersDefaultBodyDetailsItems0 struct {
	// at type
	AtType string `json:"@type,omitempty"`
}

// Validate validates this list DB clusters default body details items0
func (o *ListDBClustersDefaultBodyDetailsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this list DB clusters default body details items0 based on context it is used
func (o *ListDBClustersDefaultBodyDetailsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ListDBClustersDefaultBodyDetailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListDBClustersDefaultBodyDetailsItems0) UnmarshalBinary(b []byte) error {
	var res ListDBClustersDefaultBodyDetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ListDBClustersOKBody list DB clusters OK body
swagger:model ListDBClustersOKBody
*/
type ListDBClustersOKBody struct {
	// DB clusters information.
	DBClusters []*ListDBClustersOKBodyDBClustersItems0 `json:"db_clusters"`
}

// Validate validates this list DB clusters OK body
func (o *ListDBClustersOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDBClusters(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ListDBClustersOKBody) validateDBClusters(formats strfmt.Registry) error {
	if swag.IsZero(o.DBClusters) { // not required
		return nil
	}

	for i := 0; i < len(o.DBClusters); i++ {
		if swag.IsZero(o.DBClusters[i]) { // not required
			continue
		}

		if o.DBClusters[i] != nil {
			if err := o.DBClusters[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("listDbClustersOk" + "." + "db_clusters" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("listDbClustersOk" + "." + "db_clusters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this list DB clusters OK body based on the context it is used
func (o *ListDBClustersOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDBClusters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ListDBClustersOKBody) contextValidateDBClusters(ctx context.Context, formats strfmt.Registry) error {
	for i := 0; i < len(o.DBClusters); i++ {
		if o.DBClusters[i] != nil {
			if err := o.DBClusters[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("listDbClustersOk" + "." + "db_clusters" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("listDbClustersOk" + "." + "db_clusters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ListDBClustersOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListDBClustersOKBody) UnmarshalBinary(b []byte) error {
	var res ListDBClustersOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ListDBClustersOKBodyDBClustersItems0 list DB clusters OK body DB clusters items0
swagger:model ListDBClustersOKBodyDBClustersItems0
*/
type ListDBClustersOKBodyDBClustersItems0 struct {
	// Cluster ID.
	ID string `json:"id,omitempty"`

	// Cluster name.
	Name string `json:"name,omitempty"`

	// DBClusterType represents database cluster type.
	//
	//  - DB_CLUSTER_TYPE_INVALID: DB_CLUSTER_TYPE_INVALID represents unknown cluster type.
	//  - DB_CLUSTER_TYPE_PXC: DB_CLUSTER_TYPE_PXC represents pxc cluster type.
	//  - DB_CLUSTER_TYPE_PSMDB: DB_CLUSTER_TYPE_PSMDB represents psmdb cluster type.
	// Enum: [DB_CLUSTER_TYPE_INVALID DB_CLUSTER_TYPE_PXC DB_CLUSTER_TYPE_PSMDB]
	ClusterType *string `json:"cluster_type,omitempty"`

	// Installed DB image.
	InstalledImage string `json:"installed_image,omitempty"`

	// Available database version user can upgrade cluster to, returned as an image. Image tag contains the version.
	// If it's empty, no upgrade is available.
	AvailableImage string `json:"available_image,omitempty"`
}

// Validate validates this list DB clusters OK body DB clusters items0
func (o *ListDBClustersOKBodyDBClustersItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateClusterType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var listDbClustersOkBodyDbClustersItems0TypeClusterTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["DB_CLUSTER_TYPE_INVALID","DB_CLUSTER_TYPE_PXC","DB_CLUSTER_TYPE_PSMDB"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		listDbClustersOkBodyDbClustersItems0TypeClusterTypePropEnum = append(listDbClustersOkBodyDbClustersItems0TypeClusterTypePropEnum, v)
	}
}

const (

	// ListDBClustersOKBodyDBClustersItems0ClusterTypeDBCLUSTERTYPEINVALID captures enum value "DB_CLUSTER_TYPE_INVALID"
	ListDBClustersOKBodyDBClustersItems0ClusterTypeDBCLUSTERTYPEINVALID string = "DB_CLUSTER_TYPE_INVALID"

	// ListDBClustersOKBodyDBClustersItems0ClusterTypeDBCLUSTERTYPEPXC captures enum value "DB_CLUSTER_TYPE_PXC"
	ListDBClustersOKBodyDBClustersItems0ClusterTypeDBCLUSTERTYPEPXC string = "DB_CLUSTER_TYPE_PXC"

	// ListDBClustersOKBodyDBClustersItems0ClusterTypeDBCLUSTERTYPEPSMDB captures enum value "DB_CLUSTER_TYPE_PSMDB"
	ListDBClustersOKBodyDBClustersItems0ClusterTypeDBCLUSTERTYPEPSMDB string = "DB_CLUSTER_TYPE_PSMDB"
)

// prop value enum
func (o *ListDBClustersOKBodyDBClustersItems0) validateClusterTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, listDbClustersOkBodyDbClustersItems0TypeClusterTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *ListDBClustersOKBodyDBClustersItems0) validateClusterType(formats strfmt.Registry) error {
	if swag.IsZero(o.ClusterType) { // not required
		return nil
	}

	// value enum
	if err := o.validateClusterTypeEnum("cluster_type", "body", *o.ClusterType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this list DB clusters OK body DB clusters items0 based on context it is used
func (o *ListDBClustersOKBodyDBClustersItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ListDBClustersOKBodyDBClustersItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListDBClustersOKBodyDBClustersItems0) UnmarshalBinary(b []byte) error {
	var res ListDBClustersOKBodyDBClustersItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

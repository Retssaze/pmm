// Code generated by go-swagger; DO NOT EDIT.

package services

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// UpdateServiceReader is a Reader for the UpdateService structure.
type UpdateServiceReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateServiceReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateServiceOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewUpdateServiceDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewUpdateServiceOK creates a UpdateServiceOK with default headers values
func NewUpdateServiceOK() *UpdateServiceOK {
	return &UpdateServiceOK{}
}

/*
UpdateServiceOK describes a response with status code 200, with default header values.

A successful response.
*/
type UpdateServiceOK struct {
	Payload interface{}
}

func (o *UpdateServiceOK) Error() string {
	return fmt.Sprintf("[POST /v1/inventory/Services/Update][%d] updateServiceOk  %+v", 200, o.Payload)
}

func (o *UpdateServiceOK) GetPayload() interface{} {
	return o.Payload
}

func (o *UpdateServiceOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {
	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateServiceDefault creates a UpdateServiceDefault with default headers values
func NewUpdateServiceDefault(code int) *UpdateServiceDefault {
	return &UpdateServiceDefault{
		_statusCode: code,
	}
}

/*
UpdateServiceDefault describes a response with status code -1, with default header values.

An unexpected error response.
*/
type UpdateServiceDefault struct {
	_statusCode int

	Payload *UpdateServiceDefaultBody
}

// Code gets the status code for the update service default response
func (o *UpdateServiceDefault) Code() int {
	return o._statusCode
}

func (o *UpdateServiceDefault) Error() string {
	return fmt.Sprintf("[POST /v1/inventory/Services/Update][%d] UpdateService default  %+v", o._statusCode, o.Payload)
}

func (o *UpdateServiceDefault) GetPayload() *UpdateServiceDefaultBody {
	return o.Payload
}

func (o *UpdateServiceDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {
	o.Payload = new(UpdateServiceDefaultBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
UpdateServiceBody update service body
swagger:model UpdateServiceBody
*/
type UpdateServiceBody struct {
	// service id
	ServiceID string `json:"service_id,omitempty"`

	// environment
	Environment string `json:"environment,omitempty"`

	// cluster
	Cluster string `json:"cluster,omitempty"`

	// replication set
	ReplicationSet string `json:"replication_set,omitempty"`

	// external group
	ExternalGroup string `json:"external_group,omitempty"`
}

// Validate validates this update service body
func (o *UpdateServiceBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this update service body based on context it is used
func (o *UpdateServiceBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateServiceBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateServiceBody) UnmarshalBinary(b []byte) error {
	var res UpdateServiceBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateServiceDefaultBody update service default body
swagger:model UpdateServiceDefaultBody
*/
type UpdateServiceDefaultBody struct {
	// code
	Code int32 `json:"code,omitempty"`

	// message
	Message string `json:"message,omitempty"`

	// details
	Details []*UpdateServiceDefaultBodyDetailsItems0 `json:"details"`
}

// Validate validates this update service default body
func (o *UpdateServiceDefaultBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateServiceDefaultBody) validateDetails(formats strfmt.Registry) error {
	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("UpdateService default" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("UpdateService default" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this update service default body based on the context it is used
func (o *UpdateServiceDefaultBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateServiceDefaultBody) contextValidateDetails(ctx context.Context, formats strfmt.Registry) error {
	for i := 0; i < len(o.Details); i++ {
		if o.Details[i] != nil {
			if err := o.Details[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("UpdateService default" + "." + "details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("UpdateService default" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateServiceDefaultBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateServiceDefaultBody) UnmarshalBinary(b []byte) error {
	var res UpdateServiceDefaultBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
UpdateServiceDefaultBodyDetailsItems0 update service default body details items0
swagger:model UpdateServiceDefaultBodyDetailsItems0
*/
type UpdateServiceDefaultBodyDetailsItems0 struct {
	// at type
	AtType string `json:"@type,omitempty"`
}

// Validate validates this update service default body details items0
func (o *UpdateServiceDefaultBodyDetailsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this update service default body details items0 based on context it is used
func (o *UpdateServiceDefaultBodyDetailsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateServiceDefaultBodyDetailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateServiceDefaultBodyDetailsItems0) UnmarshalBinary(b []byte) error {
	var res UpdateServiceDefaultBodyDetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
